2. For given infix expression eg. a-b*c-d/e+f, convert it into postfix expression using stack and show the operations step by step.

public class InfixToPostfixManual {
    // Function to get precedence of operators
    public static int getPrecedence(char ch) {
        if (ch == '+' || ch == '-') {
            return 1; // Low precedence
        } else if (ch == '*' || ch == '/') {
            return 2; // High precedence
        }
        return -1; // Not an operator
    }

    // Function to check if a character is an operator
    public static boolean isOperator(char ch) {
        return ch == '+' || ch == '-' || ch == '*' || ch == '/';
    }

    // Function to convert infix to postfix
    public static String infixToPostfix(String expression) {
        // Array to simulate the stack
        char[] stack = new char[expression.length()];
        int top = -1; // Stack pointer
        char[] result = new char[expression.length() * 2]; // To store the postfix result
        int resultIndex = 0; // Pointer for result array

        // Traverse the infix expression
        for (int i = 0; i < expression.length(); i++) {
            char ch = expression.charAt(i);

            // If the character is an operand, add it to the result
            if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9')) {
                result[resultIndex++] = ch;
            }
            // If the character is '(', push it to the stack
            else if (ch == '(') {
                stack[++top] = ch;
            }
            // If the character is ')', pop until '(' is encountered
            else if (ch == ')') {
                while (top != -1 && stack[top] != '(') {
                    result[resultIndex++] = stack[top--];
                }
                if (top != -1 && stack[top] == '(') {
                    top--; // Remove '('
                }
            }
            // If the character is an operator
            else if (isOperator(ch)) {
                while (top != -1 && getPrecedence(stack[top]) >= getPrecedence(ch)) {
                    result[resultIndex++] = stack[top--];
                }
                stack[++top] = ch; // Push the current operator onto the stack
            }
        }

        // Pop remaining operators from the stack
        while (top != -1) {
            result[resultIndex++] = stack[top--];
        }

        // Convert the result array to a string
        return new String(result, 0, resultIndex);
    }

    // Main method to test the program
    public static void main(String[] args) {
        String infixExpression = "a-b*c-d/e+f";
        System.out.println("Infix Expression: " + infixExpression);

        String postfixExpression = infixToPostfix(infixExpression);
        System.out.println("Postfix Expression: " + postfixExpression);
    }
}
